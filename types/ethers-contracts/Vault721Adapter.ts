/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface Vault721AdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COLLATERAL"
      | "DEBT"
      | "JSON_CLOSE"
      | "JSON_DATATYPE"
      | "JSON_DISPLAYNAME"
      | "JSON_OPEN"
      | "getTraitMetadataURI"
      | "getTraitValue"
      | "getTraitValues"
      | "setTrait"
      | "vault721"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TraitMetadataURIUpdated"
      | "TraitUpdated"
      | "TraitUpdatedList"
      | "TraitUpdatedListUniformValue"
      | "TraitUpdatedRange"
      | "TraitUpdatedRangeUniformValue"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COLLATERAL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DEBT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "JSON_CLOSE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JSON_DATATYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JSON_DISPLAYNAME",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "JSON_OPEN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTraitMetadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTraitValue",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraitValues",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrait",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vault721", values?: undefined): string;

  decodeFunctionResult(functionFragment: "COLLATERAL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DEBT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "JSON_CLOSE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "JSON_DATATYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "JSON_DISPLAYNAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "JSON_OPEN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTraitMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraitValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraitValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTrait", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault721", data: BytesLike): Result;
}

export namespace TraitMetadataURIUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraitUpdatedEvent {
  export type InputTuple = [
    traitKey: BytesLike,
    tokenId: BigNumberish,
    traitValue: BytesLike
  ];
  export type OutputTuple = [
    traitKey: string,
    tokenId: bigint,
    traitValue: string
  ];
  export interface OutputObject {
    traitKey: string;
    tokenId: bigint;
    traitValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraitUpdatedListEvent {
  export type InputTuple = [traitKey: BytesLike, tokenIds: BigNumberish[]];
  export type OutputTuple = [traitKey: string, tokenIds: bigint[]];
  export interface OutputObject {
    traitKey: string;
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraitUpdatedListUniformValueEvent {
  export type InputTuple = [
    traitKey: BytesLike,
    tokenIds: BigNumberish[],
    traitValue: BytesLike
  ];
  export type OutputTuple = [
    traitKey: string,
    tokenIds: bigint[],
    traitValue: string
  ];
  export interface OutputObject {
    traitKey: string;
    tokenIds: bigint[];
    traitValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraitUpdatedRangeEvent {
  export type InputTuple = [
    traitKey: BytesLike,
    fromTokenId: BigNumberish,
    toTokenId: BigNumberish
  ];
  export type OutputTuple = [
    traitKey: string,
    fromTokenId: bigint,
    toTokenId: bigint
  ];
  export interface OutputObject {
    traitKey: string;
    fromTokenId: bigint;
    toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TraitUpdatedRangeUniformValueEvent {
  export type InputTuple = [
    traitKey: BytesLike,
    fromTokenId: BigNumberish,
    toTokenId: BigNumberish,
    traitValue: BytesLike
  ];
  export type OutputTuple = [
    traitKey: string,
    fromTokenId: bigint,
    toTokenId: bigint,
    traitValue: string
  ];
  export interface OutputObject {
    traitKey: string;
    fromTokenId: bigint;
    toTokenId: bigint;
    traitValue: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault721Adapter extends BaseContract {
  connect(runner?: ContractRunner | null): Vault721Adapter;
  waitForDeployment(): Promise<this>;

  interface: Vault721AdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COLLATERAL: TypedContractMethod<[], [string], "view">;

  DEBT: TypedContractMethod<[], [string], "view">;

  JSON_CLOSE: TypedContractMethod<[], [string], "view">;

  JSON_DATATYPE: TypedContractMethod<[], [string], "view">;

  JSON_DISPLAYNAME: TypedContractMethod<[], [string], "view">;

  JSON_OPEN: TypedContractMethod<[], [string], "view">;

  getTraitMetadataURI: TypedContractMethod<[], [string], "view">;

  getTraitValue: TypedContractMethod<
    [_tokenId: BigNumberish, _traitKey: BytesLike],
    [string],
    "view"
  >;

  getTraitValues: TypedContractMethod<
    [_tokenId: BigNumberish, _traitKeys: BytesLike[]],
    [string[]],
    "view"
  >;

  setTrait: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  vault721: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COLLATERAL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEBT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "JSON_CLOSE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "JSON_DATATYPE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "JSON_DISPLAYNAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "JSON_OPEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTraitMetadataURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTraitValue"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _traitKey: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTraitValues"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _traitKeys: BytesLike[]],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setTrait"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vault721"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "TraitMetadataURIUpdated"
  ): TypedContractEvent<
    TraitMetadataURIUpdatedEvent.InputTuple,
    TraitMetadataURIUpdatedEvent.OutputTuple,
    TraitMetadataURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TraitUpdated"
  ): TypedContractEvent<
    TraitUpdatedEvent.InputTuple,
    TraitUpdatedEvent.OutputTuple,
    TraitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TraitUpdatedList"
  ): TypedContractEvent<
    TraitUpdatedListEvent.InputTuple,
    TraitUpdatedListEvent.OutputTuple,
    TraitUpdatedListEvent.OutputObject
  >;
  getEvent(
    key: "TraitUpdatedListUniformValue"
  ): TypedContractEvent<
    TraitUpdatedListUniformValueEvent.InputTuple,
    TraitUpdatedListUniformValueEvent.OutputTuple,
    TraitUpdatedListUniformValueEvent.OutputObject
  >;
  getEvent(
    key: "TraitUpdatedRange"
  ): TypedContractEvent<
    TraitUpdatedRangeEvent.InputTuple,
    TraitUpdatedRangeEvent.OutputTuple,
    TraitUpdatedRangeEvent.OutputObject
  >;
  getEvent(
    key: "TraitUpdatedRangeUniformValue"
  ): TypedContractEvent<
    TraitUpdatedRangeUniformValueEvent.InputTuple,
    TraitUpdatedRangeUniformValueEvent.OutputTuple,
    TraitUpdatedRangeUniformValueEvent.OutputObject
  >;

  filters: {
    "TraitMetadataURIUpdated()": TypedContractEvent<
      TraitMetadataURIUpdatedEvent.InputTuple,
      TraitMetadataURIUpdatedEvent.OutputTuple,
      TraitMetadataURIUpdatedEvent.OutputObject
    >;
    TraitMetadataURIUpdated: TypedContractEvent<
      TraitMetadataURIUpdatedEvent.InputTuple,
      TraitMetadataURIUpdatedEvent.OutputTuple,
      TraitMetadataURIUpdatedEvent.OutputObject
    >;

    "TraitUpdated(bytes32,uint256,bytes32)": TypedContractEvent<
      TraitUpdatedEvent.InputTuple,
      TraitUpdatedEvent.OutputTuple,
      TraitUpdatedEvent.OutputObject
    >;
    TraitUpdated: TypedContractEvent<
      TraitUpdatedEvent.InputTuple,
      TraitUpdatedEvent.OutputTuple,
      TraitUpdatedEvent.OutputObject
    >;

    "TraitUpdatedList(bytes32,uint256[])": TypedContractEvent<
      TraitUpdatedListEvent.InputTuple,
      TraitUpdatedListEvent.OutputTuple,
      TraitUpdatedListEvent.OutputObject
    >;
    TraitUpdatedList: TypedContractEvent<
      TraitUpdatedListEvent.InputTuple,
      TraitUpdatedListEvent.OutputTuple,
      TraitUpdatedListEvent.OutputObject
    >;

    "TraitUpdatedListUniformValue(bytes32,uint256[],bytes32)": TypedContractEvent<
      TraitUpdatedListUniformValueEvent.InputTuple,
      TraitUpdatedListUniformValueEvent.OutputTuple,
      TraitUpdatedListUniformValueEvent.OutputObject
    >;
    TraitUpdatedListUniformValue: TypedContractEvent<
      TraitUpdatedListUniformValueEvent.InputTuple,
      TraitUpdatedListUniformValueEvent.OutputTuple,
      TraitUpdatedListUniformValueEvent.OutputObject
    >;

    "TraitUpdatedRange(bytes32,uint256,uint256)": TypedContractEvent<
      TraitUpdatedRangeEvent.InputTuple,
      TraitUpdatedRangeEvent.OutputTuple,
      TraitUpdatedRangeEvent.OutputObject
    >;
    TraitUpdatedRange: TypedContractEvent<
      TraitUpdatedRangeEvent.InputTuple,
      TraitUpdatedRangeEvent.OutputTuple,
      TraitUpdatedRangeEvent.OutputObject
    >;

    "TraitUpdatedRangeUniformValue(bytes32,uint256,uint256,bytes32)": TypedContractEvent<
      TraitUpdatedRangeUniformValueEvent.InputTuple,
      TraitUpdatedRangeUniformValueEvent.OutputTuple,
      TraitUpdatedRangeUniformValueEvent.OutputObject
    >;
    TraitUpdatedRangeUniformValue: TypedContractEvent<
      TraitUpdatedRangeUniformValueEvent.InputTuple,
      TraitUpdatedRangeUniformValueEvent.OutputTuple,
      TraitUpdatedRangeUniformValueEvent.OutputObject
    >;
  };
}
